{"version":3,"sources":["components/MediaBoard.tsx","components/AddMedia.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MediaBoard","medias","className","map","media","i","key","src","alt","name","href","AddMedia","handleAdd","myRef","createRef","onSubmit","e","current","value","preventDefault","type","ref","App","useState","setMedias","query","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yPAqBeA,EAnBI,SAAC,GAIb,IAHLC,EAGI,EAHJA,OAIA,OACE,yBAAKC,UAAU,eACZD,EAAOE,IAAI,SAACC,EAAOC,GAAR,OACV,yBAAKC,IAAKD,EAAGH,UAAU,SACrB,yBAAKA,UAAU,QACb,yBAAKK,IAAG,UAAKH,EAAMG,IAAX,aAA2BC,IAAG,UAAKJ,EAAMK,KAAX,cAExC,uBAAGC,KAAI,sBAAiBN,EAAMK,KAAvB,SAAP,IAA4CL,EAAMK,WCM7CE,EAlBE,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,UACZC,EAAQC,sBACd,OACE,yBAAKZ,UAAU,aACb,0BACEa,SAAU,SAAAC,GACRJ,EAAUC,EAAMI,QAASC,OACzBF,EAAEG,iBACFN,EAAMI,QAASC,MAAQ,KAGzB,2BAAOE,KAAK,OAAOC,IAAKR,EAAOX,UAAU,cACzC,2BAAOkB,KAAK,SAASF,MAAM,MAAMhB,UAAU,oBCwDpCoB,G,MA/DO,WAAO,IAAD,EACEC,mBAAS,CACnC,CACEd,KAAM,WACNF,IAAK,oCAEP,CACEE,KAAM,SACNF,IAAK,kCAEP,CACEE,KAAM,UACNF,IAAK,mCAEP,CACEE,KAAM,YACNF,IAAK,qCAEP,CACEE,KAAM,SACNF,IAAK,kCAEP,CACEE,KAAM,WACNF,IAAK,oCAEP,CACEE,KAAM,SACNF,IAAK,kCAEP,CACEE,KAAM,YACNF,IAAK,qCAEP,CACEE,KAAM,UACNF,IAAK,mCAEP,CACEE,KAAM,SACNF,IAAK,oCAxCiB,mBACnBN,EADmB,KACXuB,EADW,KAsD1B,OACE,yBAAKtB,UAAU,OACb,8CACA,kBAAC,EAAD,CAAYD,OAAQA,IACpB,kBAAC,EAAD,CAAUW,UAdI,SAACa,GACjBD,EAAU,GAAD,mBACJvB,GADI,CAEP,CACEQ,KAAMgB,EACNlB,IAAI,uBAAD,OAAyBkB,EAAzB,kBC5CSC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.1c910175.chunk.js","sourcesContent":["import React from \"react\";\n\nconst MediaBoard = ({\n  medias\n}: {\n  medias: Array<{ name: string; src: string }>;\n}) => {\n  return (\n    <div className=\"media-board\">\n      {medias.map((media, i) => (\n        <div key={i} className=\"media\">\n          <div className=\"logo\">\n            <img src={`${media.src}?size=100`} alt={`${media.name}'s logo`} />\n          </div>\n          <a href={`https://www.${media.name}.com`}>@{media.name}</a>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default MediaBoard;\n","import React, { createRef } from \"react\";\n\nconst AddMedia = ({ handleAdd }: { handleAdd: Function }) => {\n  const myRef = createRef<HTMLInputElement>();\n  return (\n    <div className=\"add-media\">\n      <form\n        onSubmit={e => {\n          handleAdd(myRef.current!.value);\n          e.preventDefault();\n          myRef.current!.value = \"\";\n        }}\n      >\n        <input type=\"text\" ref={myRef} className=\"input-box\" />\n        <input type=\"submit\" value=\"Add\" className=\"input-button\" />\n      </form>\n    </div>\n  );\n};\n\nexport default AddMedia;\n","import React, { useState } from \"react\";\n\nimport MediaBoard from \"./components/MediaBoard\";\nimport AddMedia from \"./components/AddMedia\";\nimport logo from \"./logo.svg\";\nimport \"./App.scss\";\n\nconst App: React.FC = () => {\n  const [medias, setMedias] = useState([\n    {\n      name: \"facebook\",\n      src: \"//logo.clearbit.com/facebook.com\"\n    },\n    {\n      name: \"medium\",\n      src: \"//logo.clearbit.com/medium.com\"\n    },\n    {\n      name: \"twitter\",\n      src: \"//logo.clearbit.com/twitter.com\"\n    },\n    {\n      name: \"instagram\",\n      src: \"//logo.clearbit.com/instagram.com\"\n    },\n    {\n      name: \"wechat\",\n      src: \"//logo.clearbit.com/wechat.com\"\n    },\n    {\n      name: \"whatsapp\",\n      src: \"//logo.clearbit.com/whatsapp.com\"\n    },\n    {\n      name: \"meetup\",\n      src: \"//logo.clearbit.com/meetup.com\"\n    },\n    {\n      name: \"pinterest\",\n      src: \"//logo.clearbit.com/pinterest.com\"\n    },\n    {\n      name: \"youtube\",\n      src: \"//logo.clearbit.com/youtube.com\"\n    },\n    {\n      name: \"flickr\",\n      src: \"//logo.clearbit.com/flickr.com\"\n    }\n  ]);\n\n  const handleAdd = (query: string) => {\n    setMedias([\n      ...medias,\n      {\n        name: query,\n        src: `//logo.clearbit.com/${query}.com`\n      }\n    ]);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>My Media Stack</h1>\n      <MediaBoard medias={medias} />\n      <AddMedia handleAdd={handleAdd} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}